!function(e){var t={};function n(r){if(t[r])return t[r].exports;var a=t[r]={i:r,l:!1,exports:{}};return e[r].call(a.exports,a,a.exports,n),a.l=!0,a.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var a in e)n.d(r,a,function(t){return e[t]}.bind(null,a));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=0)}([function(e,t,n){var r={registerPlayer:function(e){var t,n,r=null,a=null,o=!1,i=!1,l=!1,u=null,s=null,c=null;function d(){u({state:"unavailable",info:"The configured stream is currently unavailable."}),o=!0,function(){var e=p().querySelector(".stream-status");if(!e){(e=document.createElement("div")).className="stream-status";var t=b();if(t&&(e.style.background='url("'+t+'")',e.style.backgroundSize="cover"),r){var o=r.countdown_timestamp;if(o&&(o=new Date(1e3*parseInt(o))).getTime()>Date.now()){var i=document.createElement("div");i.className="stream-status-overlay";var l=o.toDateString(),u=o.toISOString().substr(11,5),s=r.title+"<br />"||!1;i.innerHTML=s+"Stream will start on:<br />"+l+" @ "+u,e.appendChild(i);var c=document.createElement("div");c.className="countdown",c.innerHTML="&nbsp;",i.appendChild(c),function(e){e=e.getTime();n=setInterval((function(){var t=(new Date).getTime(),r=e-t,a=Math.floor(r/864e5),o=Math.floor(r%864e5/36e5),i=Math.floor(r%36e5/6e4),l=Math.floor(r%6e4/1e3);p().querySelector(".countdown").innerHTML=a+"d "+o+"h "+i+"m "+l+"s ",r<0&&(clearInterval(n),p().querySelector(".countdown").innerHTML="Starting...")}),1e3)}(o)}}else e.textContent=a&&a.offlineText||"The stream is currently not available.",e.classList.add("no-data");p().appendChild(e)}}(),l||(l=!0,t=setInterval(g,f()))}function f(){return a&&a.retry||3e3}function v(){var e=p().querySelector(".stream-status");e&&e.parentNode.removeChild(e)}function m(){u({state:"available",info:"The configured stream is available."}),o=!1,v()}function p(){return e.element.parentNode.parentNode}function g(){for(var t=[e.source],n=0;n<t.length;n++){var r=t[n].sources[0].src,a=r,l=Math.round(1e12*Math.random());a=r.indexOf("?")>-1?r+"&rn="+l:r+"?rn="+l;var u=new XMLHttpRequest;u.onreadystatechange=function(){4==this.readyState&&200!=this.status&&i&&!o?d():4==this.readyState&&200==this.status&&o&&(m(),S(t[n]))},u.open("GET",a,!0),u.send()}}function y(){i=!0,l||(l=!0,t=setInterval(g,f()))}function h(t){if(t.url==e.src){var n=t.url.split("?");c=n.length>1?n[1]:null}else if(c){var r=t.url+"?"+c;t.redirect({url:r})}}function w(){i=!1}function b(){return r&&r.image||e.source.metadata&&e.source.metadata.wowza&&e.source.metadata.wowza.placeholderImageUrl}function S(t){e.autoplay=!0,e.source=t||e.source}return e.addEventListener("sourcechange",(function(c){if(e&&(r=null,a=null,o=!1,clearInterval(t),clearInterval(n),i=!1,l=!1,u=null,s=null,e.network.removeEventListener("offline",d),e.removeEventListener("error",d),e.network.removeEventListener("online",m),e.removeEventListener("waiting",y),e.removeEventListener("playing",w),e.network.addRequestInterceptor(h)),v(),a=c.source.metadata&&c.source.metadata.wowza){e&&(e.network.addEventListener("offline",d),e.addEventListener("error",d),e.network.addEventListener("online",m),e.addEventListener("waiting",y),e.addEventListener("playing",w),a&&a.queryParametersPassthrough&&e.network.addRequestInterceptor(h));var f=a.jsonUrl;f&&(p=f,(g=new XMLHttpRequest).onreadystatechange=function(){4==this.readyState&&200==this.status&&(r=JSON.parse(g.responseText),s({data:r,status:"available"}),e.poster=b())},g.open("GET",p,!0),g.send()),u=a.statechangeCallback,s=a.datachangeCallback}var p,g})),{getStreamData:function(){return r},getState:function(){return o?"offline":"online"}}}};window.theoplayerWowza=r}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,